require("plugins").setup()

vim.opt.tabstop = 2
vim.opt.shiftwidth = 2
vim.opt.softtabstop = 2
vim.opt.expandtab = true
vim.opt.tw = 80
vim.opt.cc = '80'
vim.opt.wrap = false
vim.opt.clipboard:append('unnamedplus')
vim.opt.listchars='tab:>-,trail:.,extends:>'
vim.opt.list = true

vim.cmd([[
map H ^
map L $
cab o find
imap <S-Insert> <C-R><C-O>*
cmap <S-Insert> <C-R><C-O>*
vmap <S-Insert> "-d"*P
map <S-Insert> "*P
map <silent> <F8> :call ToggleTraceWatch()<CR>
execute "map ,ev :e! " . stdpath('config') . "/init.lua<CR>"
execute "map ,sv :so " . stdpath('config') . "/init.lua<CR>"

map ,i0 dO#if 0<CR>#endif<ESC>kp

map <silent> <C-F5> :if expand("%:p:h") != ""<CR>:!start explorer.exe %:p:h,/e<CR>:endif<CR><CR>

map <silent> <F12> :CtrlPMRU<cr>
imap <silent> <F12> <ESC>:CtrlPMRU<cr>

let g:clang_format_path = "ide/clang-format.exe"
au BufRead,BufNewFile,BufEnter *.c,*.h noremap <silent> <F1> :py3f ide/clang-format.py<CR>

set gcr=a:blockCursor-blinkwait600-blinkoff700-blinkon600
]])

vim.api.nvim_create_autocmd({"BufEnter", "WinEnter"}, {
  callback = function(ev)
    local fl = assert(loadfile('__filelist.lua'))  -- Generated by shell on startup.
    local project_files = fl()
    function notify(name, bufid, tick, firstchanged, lastchanged, lastline, bytecount, _, _)
      local fn = vim.api.nvim_buf_get_name(bufid)
      if project_files[fn] ~= nil then
        local contents = vim.api.nvim_buf_get_lines(bufid, 0, -1, false)
        vim.rpcnotify(0, "EventFileUpdate", bufid, fn, contents)
      end
      return false
    end
    vim.api.nvim_buf_attach(ev.buf, false, {
        on_lines=notify,
        on_changedtick=notify,
        on_reload=notify
      })
  end,
  once = false
})

--[[local api = vim.api

local bnr = vim.fn.bufnr('%')
local ns_id = api.nvim_create_namespace('demo')

local line_num = 5
local col_num = 5

local opts = {
  end_line = 10,
  id = 1,
  virt_text = {{"/*QQ demo */", "Comment"}},
  virt_text_pos = 'eol',
  -- virt_text_win_col = 20,
}

local mark_id = api.nvim_buf_set_extmark(bnr, ns_id, line_num, 0, opts)
print(mark_id)
api.nvim_buf_del_extmark(bnr, ns_id, mark_id)
]]
